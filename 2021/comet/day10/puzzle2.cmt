function match(open, close) {
    if (close == '}') {
        return open == '{'
    } else if (close == ']') {
        return open == '['
    } else if (close == ')') {
        return open == '('
    } else if (close == '>') {
        return open == '<'
    }
    return false
}

function get_closer(opener) {
    if (opener == '(') {
        return ')'
    } else if (opener == '[') {
        return ']'
    } else if (opener == '{') {
        return '}'
    } else if (opener == '<') {
        return '>'
    }
}

var lines = File.read_all_lines('input')

var incomplete_lines = []
foreach (var line in lines) {
    var stack = []
    var correct = true
    foreach (var letter in line.trim()) {
        if (letter == '}' || letter == ']' || letter == ')' || letter == '>') {
            var duplicate = stack.pop()
            if (!match(duplicate, letter)) {
                correct = false
                break
            }
        }
        else {
            stack.push(letter)
        }
    }
    if (correct)
    {
        var completers = []
        while (stack.length() > 0) {
            var opener = stack.pop()
            completers.push(get_closer(opener))
        }
        incomplete_lines.push(completers)
    }
}

var scores = []
foreach (var line in incomplete_lines) {
    var score = 0
    foreach (var closer in line) {
        score *= 5
        if (closer == ')') {
            score += 1
        } else if (closer == ']') {
            score += 2
        } else if (closer == '}') {
            score += 3
        } else if (closer == '>') {
            score += 4
        }
    }
    scores.push(score)
}

scores.sort()
var mid_point = (scores.length() / 2).floor()
print(scores[mid_point])
